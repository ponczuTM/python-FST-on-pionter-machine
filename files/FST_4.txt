def get_closest_finger(self, number):
    closest_finger = None
    smallest_distance = None
    for finger in self.fingers:
        self.move(finger - self.index)
        self.get()
        if (closest_finger is None or abs(self.value - number) < smallest_distance):
            closest_finger = finger
            smallest_distance = abs(self.value - number)
    self.move(closest_finger - self.index)
    self.get()
    
def find_FST(self, number):
    self.counter = 0
    steps = 0
    self.get_closest_finger(number)
    while number != self.value:
        self.get()
        if self.value is None:
            print(f"steps in algorithm: {steps}")
            self.move(-self.index)
            return False
        if number < self.value:
            self.go_R()
            self.get()
            if self.value is None:
                print(f"steps in algorithm: {steps}")
                self.move(-self.index)
                return False
            self.move(self.value)
            self.get()
            steps += 1
            if self.value is not None:
                self.set_finger(self.index)
        else:
            self.go_R()
            self.go_R()
            self.get()
            if self.value is None:
                print(f"steps in algorithm: {steps}")
                self.move(-self.index)
                return False
            self.move(self.value)
            self.get()
            steps += 1
            if self.value is not None:
                self.set_finger(self.index)
    print(f"steps in algorithm: {steps}")
    return True